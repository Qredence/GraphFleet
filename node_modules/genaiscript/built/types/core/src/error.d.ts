export declare function serializeError(e: unknown | string | Error | SerializedError): SerializedError;
export declare function errorMessage(e: any, defaultValue?: string): string;
export declare class CancelError extends Error {
    static readonly NAME = "CancelError";
    constructor(message: string);
}
export declare class NotSupportedError extends Error {
    static readonly NAME = "NotSupportedError";
    constructor(message: string);
}
export declare class RequestError extends Error {
    readonly status: number;
    readonly statusText: string;
    readonly body: any;
    readonly bodyText?: string;
    readonly retryAfter?: number;
    static readonly NAME = "RequestError";
    constructor(status: number, statusText: string, body: any, bodyText?: string, retryAfter?: number);
}
export declare function isCancelError(e: Error | SerializedError): boolean;
export declare function isRequestError(e: Error, statusCode?: number, code?: string): boolean;
//# sourceMappingURL=error.d.ts.map