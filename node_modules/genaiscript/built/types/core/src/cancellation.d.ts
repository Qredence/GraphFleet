/**
 * A cancellation token is passed to an asynchronous or long running
 * operation to request cancellation, like cancelling a request
 * for completion items because the user continued to type.
 *
 * To get an instance of a `CancellationToken` use a
 * {@link CancellationTokenSource}.
 */
export interface CancellationToken {
    /**
     * Is `true` when the token has been cancelled, `false` otherwise.
     */
    isCancellationRequested: boolean;
}
export declare class AbortSignalCancellationToken implements CancellationToken {
    private readonly signal;
    constructor(signal: AbortSignal);
    get isCancellationRequested(): boolean;
}
export declare class AbortSignalCancellationController {
    readonly controller: AbortController;
    readonly token: AbortSignalCancellationToken;
    constructor();
    abort(reason?: any): void;
}
export declare function checkCancelled(token: CancellationToken): void;
export interface CancellationOptions {
    cancellationToken?: CancellationToken;
}
//# sourceMappingURL=cancellation.d.ts.map