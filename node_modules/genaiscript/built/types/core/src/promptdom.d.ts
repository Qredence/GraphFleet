import { TraceOptions } from "./trace";
import { ChatCompletionMessageParam } from "./chat";
export interface PromptNode extends ContextExpansionOptions {
    type?: "text" | "image" | "schema" | "function" | "fileMerge" | "outputProcessor" | "stringTemplate" | "assistant" | "def" | "chatParticipant" | "fileOutput" | undefined;
    children?: PromptNode[];
    error?: unknown;
    tokens?: number;
    /**
     * Rendered markdown preview of the node
     */
    preview?: string;
}
export interface PromptTextNode extends PromptNode {
    type: "text";
    value: Awaitable<string>;
    resolved?: string;
}
export interface PromptDefNode extends PromptNode, DefOptions {
    type: "def";
    name: string;
    value: Awaitable<WorkspaceFile>;
    resolved?: WorkspaceFile;
}
export interface PromptAssistantNode extends PromptNode {
    type: "assistant";
    value: Awaitable<string>;
    resolved?: string;
}
export interface PromptStringTemplateNode extends PromptNode {
    type: "stringTemplate";
    strings: TemplateStringsArray;
    args: any[];
    resolved?: string;
}
export interface PromptImage {
    url: string;
    filename?: string;
    detail?: "low" | "high";
}
export interface PromptImageNode extends PromptNode {
    type: "image";
    value: Awaitable<PromptImage>;
    resolved?: PromptImage;
}
export interface PromptSchemaNode extends PromptNode {
    type: "schema";
    name: string;
    value: JSONSchema;
    options?: DefSchemaOptions;
}
export interface PromptFunctionNode extends PromptNode {
    type: "function";
    name: string;
    description: string;
    parameters: JSONSchema;
    fn: ChatFunctionHandler;
}
export interface PromptFileMergeNode extends PromptNode {
    type: "fileMerge";
    fn: FileMergeHandler;
}
export interface PromptOutputProcessorNode extends PromptNode {
    type: "outputProcessor";
    fn: PromptOutputProcessorHandler;
}
export interface PromptChatParticipantNode extends PromptNode {
    type: "chatParticipant";
    participant: ChatParticipant;
    options?: ChatParticipantOptions;
}
export interface FileOutputNode extends PromptNode {
    type: "fileOutput";
    output: FileOutput;
}
export declare function createTextNode(value: Awaitable<string>, options?: ContextExpansionOptions): PromptTextNode;
export declare function createDefNode(name: string, file: WorkspaceFile, options: DefOptions & TraceOptions): PromptDefNode;
export declare function createAssistantNode(value: Awaitable<string>, options?: ContextExpansionOptions): PromptAssistantNode;
export declare function createStringTemplateNode(strings: TemplateStringsArray, args: any[], options?: ContextExpansionOptions): PromptStringTemplateNode;
export declare function createImageNode(value: Awaitable<PromptImage>, options?: ContextExpansionOptions): PromptImageNode;
export declare function createSchemaNode(name: string, value: JSONSchema, options?: DefSchemaOptions): PromptSchemaNode;
export declare function createFunctionNode(name: string, description: string, parameters: JSONSchema, fn: ChatFunctionHandler): PromptFunctionNode;
export declare function createFileMergeNode(fn: FileMergeHandler): PromptFileMergeNode;
export declare function createOutputProcessor(fn: PromptOutputProcessorHandler): PromptOutputProcessorNode;
export declare function createChatParticipant(participant: ChatParticipant): PromptChatParticipantNode;
export declare function createFileOutput(output: FileOutput): FileOutputNode;
export declare function createDefDataNode(name: string, data: object | object[], options?: DefDataOptions): PromptTextNode;
export declare function appendChild(parent: PromptNode, child: PromptNode): void;
export interface PromptNodeVisitor {
    node?: (node: PromptNode) => Awaitable<void>;
    error?: (node: PromptNode) => Awaitable<void>;
    afterNode?: (node: PromptNode) => Awaitable<void>;
    text?: (node: PromptTextNode) => Awaitable<void>;
    def?: (node: PromptDefNode) => Awaitable<void>;
    image?: (node: PromptImageNode) => Awaitable<void>;
    schema?: (node: PromptSchemaNode) => Awaitable<void>;
    function?: (node: PromptFunctionNode) => Awaitable<void>;
    fileMerge?: (node: PromptFileMergeNode) => Awaitable<void>;
    stringTemplate?: (node: PromptStringTemplateNode) => Awaitable<void>;
    outputProcessor?: (node: PromptOutputProcessorNode) => Awaitable<void>;
    assistant?: (node: PromptAssistantNode) => Awaitable<void>;
    chatParticipant?: (node: PromptChatParticipantNode) => Awaitable<void>;
    fileOutput?: (node: FileOutputNode) => Awaitable<void>;
}
export declare function visitNode(node: PromptNode, visitor: PromptNodeVisitor): Promise<void>;
export interface PromptNodeRender {
    prompt: string;
    assistantPrompt: string;
    images: PromptImage[];
    errors: unknown[];
    schemas: Record<string, JSONSchema>;
    functions: ToolCallback[];
    fileMerges: FileMergeHandler[];
    outputProcessors: PromptOutputProcessorHandler[];
    chatParticipants: ChatParticipant[];
    messages: ChatCompletionMessageParam[];
    fileOutputs: FileOutput[];
}
export declare function renderPromptNode(modelId: string, node: PromptNode, options?: TraceOptions): Promise<PromptNodeRender>;
//# sourceMappingURL=promptdom.d.ts.map