export declare const defaultPrompts: Readonly<Record<string, string>>;
export declare const promptDefinitions: Readonly<Record<string, string>>;
export declare const treeSitterWasms: string[];
export declare const promptFooDriver = "/**\n * GenAiScript PromptFoo Custom Provider\n *\n * Do not edit, auto-generated.\n *\n */\nimport { promisify } from \"node:util\"\nimport { exec } from \"node:child_process\"\n\nconst execAsync = promisify(exec)\n\nclass GenAIScriptApiProvider {\n    constructor(options) {\n        this.config = options.config\n        this.providerId =\n            options.id || `genaiscript:${this.config.model || \"default\"}`\n        this.label = `genaiscript ${this.config.model || \"default\"}`\n    }\n\n    id() {\n        return this.providerId\n    }\n\n    async callApi(prompt, context) {\n        const { model, temperature, top_p, cache, version, cli, quiet } =\n            this.config\n        const { vars, logger } = context\n        try {\n            let files = vars.files // string or string[]\n            const testVars = vars.vars // {}\n            if (files && !Array.isArray(files)) files = [files] // ensure array\n\n            const args = []\n            if (cli) args.push(`node`, cli)\n            else\n                args.push(\n                    `npx`,\n                    `--yes`,\n                    version ? `genaiscript@${version}` : \"genaiscript\"\n                )\n\n            args.push(\"run\", prompt)\n            if (files) args.push(...files)\n            if (testVars && typeof testVars === \"object\") {\n                args.push(\"--vars\")\n                for (const [key, value] of Object.entries(testVars)) {\n                    args.push(`${key}=${JSON.stringify(value)}`)\n                }\n            }\n            args.push(\"--json\")\n            if (quiet) args.push(\"--quiet\")\n            if (model) args.push(\"--model\", model)\n            if (temperature !== undefined)\n                args.push(\"--temperature\", temperature)\n            if (top_p !== undefined) args.push(\"--top_p\", top_p)\n            if (cache === false) args.push(\"--no-cache\")\n\n            const cmd = args\n                .map((a) =>\n                    typeof a === \"string\" && a.includes(\" \")\n                        ? JSON.stringify(a)\n                        : a\n                )\n                .join(\" \")\n            logger.info(cmd)\n            let { stdout, stderr, error } = await execAsync(cmd)\n            logger.debug(stderr)\n\n            const outputText = stdout.slice(Math.max(0, stdout.indexOf(\"{\")))\n            let output\n            try {\n                output = JSON.parse(outputText)\n                if (output.status === \"error\") \n                    error = output.statusText || error || \"error\"\n            } catch (e) {\n                error = e?.message || \"error parsing genaiscript json output\"\n                output = {\n                    text: outputText,\n                    error,\n                }\n            }\n\n            if (error)\n                logger.error(error)\n            return {\n                output,\n                error,\n            }\n        } catch (e) {\n            logger.error(e)\n            return {\n                output: { text: \"\" },\n                error: e,\n            }\n        }\n    }\n}\n\nexport default GenAIScriptApiProvider\n";
//# sourceMappingURL=default_prompts.d.ts.map