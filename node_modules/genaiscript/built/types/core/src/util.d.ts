import { escape as HTMLEscape_ } from "html-escaper";
export declare function unique(strings: string[]): string[];
export declare function trimNewlines(s: string): string;
export declare function delay<T>(millis: number, value?: T): Promise<T | undefined>;
export declare function strcmp(a: string, b: string): 0 | 1 | -1;
export declare function arrayify<T>(a: T | T[]): T[];
export declare function toArray<T>(a: ArrayLike<T>): T[];
export declare function toStringList(...token: string[]): string;
export declare function parseBoolean(s: string): boolean;
export declare function assert(cond: boolean, msg?: string, debugData?: any): void;
export declare function concatBuffers(...chunks: Uint8Array[]): Uint8Array;
export declare function sha256(...buffers: Uint8Array[]): Promise<Uint8Array>;
export declare function toHex(bytes: ArrayLike<number>, sep?: string): string;
export declare function fromHex(hex: string): Uint8Array;
export declare function utf8Encode(s: string): Uint8Array;
export declare function utf8Decode(buf: Uint8Array): string;
export declare function sha256string(s: string): Promise<string>;
export declare function stringToUint8Array(input: string): Uint8Array;
export declare function uint8ArrayToString(input: ArrayLike<number>): string;
export declare function fromBase64(encoded: string): Uint8Array;
export declare function toBase64(data: Uint8Array): string;
export declare function dotGenaiscriptPath(...segments: string[]): string;
export declare function relativePath(root: string, fn: string): string;
export declare function logInfo(msg: string): void;
export declare function logVerbose(msg: string): void;
export declare function logWarn(msg: string): void;
export declare function logError(msg: string | Error | SerializedError): void;
export declare function concatArrays<T>(...arrays: T[][]): T[];
export declare function randomRange(min: number, max: number): number;
export declare function last<T>(a: ArrayLike<T>): T;
export declare function groupBy<T>(list: T[], key: (value: T) => string): Record<string, T[]>;
export declare function normalizeString(s: string | number | boolean): string;
export declare function normalizeFloat(s: string | number | boolean): number;
export declare function normalizeInt(s: string | number | boolean): number;
export declare function trimTrailingSlash(s: string): string;
export declare function ellipse(text: string, length: number): string;
export declare function roundWithPrecision(x: number, digits: number, round?: (x: number) => number): number;
export declare function renderWithPrecision(x: number, digits: number, round?: (x: number) => number): string;
export declare const HTMLEscape: typeof HTMLEscape_;
//# sourceMappingURL=util.d.ts.map