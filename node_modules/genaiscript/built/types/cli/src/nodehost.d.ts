import { DockerManager } from "./docker";
import { LanguageModel } from "../../core/src/chat";
import { ServerManager, RetrievalService, ModelService, LanguageModelConfiguration, LogLevel, UTF8Decoder, UTF8Encoder, RuntimeHost } from "../../core/src/host";
import { AbortSignalOptions, TraceOptions } from "../../core/src/trace";
declare class NodeServerManager implements ServerManager {
    start(): Promise<void>;
    close(): Promise<void>;
}
export declare class NodeHost implements RuntimeHost {
    readonly dotEnvPath: string;
    userState: any;
    retrieval: RetrievalService;
    models: ModelService;
    readonly path: Path;
    readonly server: NodeServerManager;
    readonly workspace: Omit<WorkspaceFileSystem, "grep">;
    readonly parser: import("../../core/src/host").ParseService;
    readonly docker: DockerManager;
    readonly defaultModelOptions: {
        model: string;
        temperature: number;
    };
    constructor(dotEnvPath: string);
    static install(dotEnvPath: string): Promise<NodeHost>;
    readSecret(name: string): Promise<string | undefined>;
    private parseDefaults;
    private _azureToken;
    getLanguageModelConfiguration(modelId: string, options?: {
        token?: boolean;
    } & AbortSignalOptions & TraceOptions): Promise<LanguageModelConfiguration>;
    resolveLanguageModel(options: {
        model?: string;
        languageModel?: LanguageModel;
    }, configuration: LanguageModelConfiguration): Promise<LanguageModel>;
    log(level: LogLevel, msg: string): void;
    createUTF8Decoder(): UTF8Decoder;
    createUTF8Encoder(): UTF8Encoder;
    projectFolder(): string;
    installFolder(): string;
    resolvePath(...segments: string[]): string;
    readFile(name: string): Promise<Uint8Array>;
    findFiles(path: string | string[], options: {
        ignore?: string | string[];
        applyGitIgnore?: boolean;
    }): Promise<string[]>;
    writeFile(name: string, content: Uint8Array): Promise<void>;
    deleteFile(name: string): Promise<void>;
    createDirectory(name: string): Promise<void>;
    deleteDirectory(name: string): Promise<void>;
    exec(containerId: string, command: string, args: string[], options: ShellOptions & TraceOptions): Promise<ShellOutput>;
    /**
     * Starts a container to execute sandboxed code
     * @param options
     */
    container(options: ContainerOptions & TraceOptions): Promise<ContainerHost>;
    removeContainers(): Promise<void>;
}
export {};
//# sourceMappingURL=nodehost.d.ts.map