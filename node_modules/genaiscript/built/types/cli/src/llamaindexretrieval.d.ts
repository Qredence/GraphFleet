import { RetrievalService, ModelService, Host, ResponseStatus, RetrievalUpsertOptions, RetrievalSearchOptions, RetrievalSearchResponse } from "../../core/src/host";
import { MarkdownTrace } from "../../core/src/trace";
export declare class LlamaIndexRetrievalService implements RetrievalService, ModelService {
    readonly host: Host;
    private module;
    private READERS;
    constructor(host: Host);
    init(trace?: MarkdownTrace): Promise<void>;
    private getPersisDir;
    private createStorageContext;
    private getModelToken;
    pullModel(modelid: string): Promise<ResponseStatus>;
    private createServiceContext;
    vectorClear(options?: VectorSearchOptions): Promise<{
        ok: boolean;
    }>;
    private saveOptions;
    private loadOptions;
    private optionsFileName;
    vectorUpsert(filenameOrUrl: string, options?: RetrievalUpsertOptions): Promise<ResponseStatus>;
    vectorSearch(text: string, options?: RetrievalSearchOptions): Promise<RetrievalSearchResponse>;
    /**
     * Returns all embeddings
     * @returns
     */
    embeddings(options?: VectorSearchOptions): Promise<RetrievalSearchResponse>;
}
//# sourceMappingURL=llamaindexretrieval.d.ts.map