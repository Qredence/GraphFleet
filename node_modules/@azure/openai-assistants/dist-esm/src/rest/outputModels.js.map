{"version":3,"file":"outputModels.js","sourceRoot":"","sources":["../../../src/rest/outputModels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\n/** The input definition information for a code interpreter tool as used to configure an assistant. */\nexport interface CodeInterpreterToolDefinitionOutput {\n  /** The object type, which is always 'code_interpreter'. */\n  type: \"code_interpreter\";\n}\n\n/** The input definition information for a retrieval tool as used to configure an assistant. */\nexport interface RetrievalToolDefinitionOutput {\n  /** The object type, which is always 'retrieval'. */\n  type: \"retrieval\";\n}\n\n/** The input definition information for a function tool as used to configure an assistant. */\nexport interface FunctionToolDefinitionOutput {\n  /** The object type, which is always 'function'. */\n  type: \"function\";\n  /** The definition of the concrete function that the function tool should call. */\n  function: FunctionDefinitionOutput;\n}\n\n/** The input definition information for a function. */\nexport interface FunctionDefinitionOutput {\n  /** The name of the function to be called. */\n  name: string;\n  /** A description of what the function does, used by the model to choose when and how to call the function. */\n  description: string;\n  /** The parameters the functions accepts, described as a JSON Schema object. */\n  parameters: any;\n}\n\nexport interface TypeSpecRecordOutput extends Record<string, string> {}\n\n/** Represents an assistant that can call the model and use tools. */\nexport interface AssistantOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  created_at: number;\n  /** The name of the assistant. */\n  name: string | null;\n  /** The description of the assistant. */\n  description: string | null;\n  /** The ID of the model to use. */\n  model: string;\n  /** The system instructions for the assistant to use. */\n  instructions: string | null;\n  /** The collection of tools enabled for the assistant. */\n  tools: Array<ToolDefinitionOutput>;\n  /** A list of attached file IDs, ordered by creation date in ascending order. */\n  file_ids: string[];\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: TypeSpecRecordOutput | null;\n}\n\n/** The status of an assistant deletion operation. */\nexport interface AssistantDeletionStatusOutput extends DeletionStatusOutput {}\n\n/** An abstract representation of an OpenAI deletion operation result status. */\nexport interface DeletionStatusOutput {\n  /** The ID of the resource specified for deletion. */\n  id: string;\n  /** A value indicating whether deletion was successful. */\n  deleted: boolean;\n}\n\n/** The status of an assistant file deletion operation. */\nexport interface AssistantFileDeletionStatusOutput extends DeletionStatusOutput {}\n\n/** The status of a thread deletion operation. */\nexport interface ThreadDeletionStatusOutput extends DeletionStatusOutput {}\n\n/** A status response from a file deletion operation. */\nexport interface FileDeletionStatusOutput extends DeletionStatusOutput {}\n\n/** Information about a file attached to an assistant, as used by tools that can read files. */\nexport interface AssistantFileOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  created_at: number;\n  /** The assistant ID that the file is attached to. */\n  assistant_id: string;\n}\n\n/** Information about a single thread associated with an assistant. */\nexport interface AssistantThreadOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  created_at: number;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: TypeSpecRecordOutput | null;\n}\n\n/** A single, existing message within an assistant thread. */\nexport interface ThreadMessageOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  created_at: number;\n  /** The ID of the thread that this message belongs to. */\n  thread_id: string;\n  /**\n   * The role associated with the assistant thread message.\n   *\n   * Possible values: \"user\", \"assistant\"\n   */\n  role: string;\n  /** The list of content items associated with the assistant thread message. */\n  content: Array<MessageContentOutput>;\n  /** If applicable, the ID of the assistant that authored this message. */\n  assistant_id?: string;\n  /** If applicable, the ID of the run associated with the authoring of this message. */\n  run_id?: string;\n  /**\n   * A list of file IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can\n   * access files.\n   */\n  file_ids: string[];\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: TypeSpecRecordOutput | null;\n}\n\n/** An abstract representation of a single item of thread message content. */\nexport interface MessageContentOutputParent {\n  type: string;\n}\n\n/** A representation of a textual item of thread message content. */\nexport interface MessageTextContentOutput {\n  /** The object type, which is always 'text'. */\n  type: \"text\";\n  /** The text and associated annotations for this thread message content item. */\n  text: MessageTextDetailsOutput;\n}\n\n/** The text and associated annotations for a single item of assistant thread message content. */\nexport interface MessageTextDetailsOutput {\n  /** The text data. */\n  value: string;\n  /** A list of annotations associated with this text. */\n  annotations: Array<MessageTextAnnotationOutput>;\n}\n\n/** A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the 'retrieval' tool to search files. */\nexport interface MessageTextFileCitationAnnotationOutput {\n  /** The object type, which is always 'file_citation'. */\n  type: \"file_citation\";\n  /** The textual content associated with this text annotation item. */\n  text: string;\n  /** The first text index associated with this text annotation. */\n  start_index: number;\n  /** The last text index associated with this text annotation. */\n  end_index: number;\n  /**\n   * A citation within the message that points to a specific quote from a specific file.\n   * Generated when the assistant uses the \"retrieval\" tool to search files.\n   */\n  file_citation: MessageTextFileCitationDetailsOutput;\n}\n\n/** A representation of a file-based text citation, as used in a file-based annotation of text thread message content. */\nexport interface MessageTextFileCitationDetailsOutput {\n  /** The ID of the file associated with this citation. */\n  file_id: string;\n  /** The specific quote cited in the associated file. */\n  quote: string;\n}\n\n/** A citation within the message that points to a file located at a specific path. */\nexport interface MessageTextFilePathAnnotationOutput {\n  /** The object type, which is always 'file_path'. */\n  type: \"file_path\";\n  /** The textual content associated with this text annotation item. */\n  text: string;\n  /** The first text index associated with this text annotation. */\n  start_index: number;\n  /** The last text index associated with this text annotation. */\n  end_index: number;\n  /** A URL for the file that's generated when the assistant used the code_interpreter tool to generate a file. */\n  file_path: MessageTextFilePathDetailsOutput;\n}\n\n/** An encapsulation of an image file ID, as used by message image content. */\nexport interface MessageTextFilePathDetailsOutput {\n  /** The ID of the specific file that the citation is from. */\n  file_id: string;\n}\n\n/** A representation of image file content in a thread message. */\nexport interface MessageImageFileContentOutput {\n  /** The object type, which is always 'image_file'. */\n  type: \"image_file\";\n  /** The image file for this thread message content item. */\n  image_file: MessageImageFileDetailsOutput;\n}\n\n/** An image reference, as represented in thread message content. */\nexport interface MessageImageFileDetailsOutput {\n  /** The ID for the file associated with this image. */\n  file_id: MessageImageFileIdDetailsOutput;\n}\n\n/** An encapsulation of an image file ID, as used by message image content. */\nexport interface MessageImageFileIdDetailsOutput {\n  /** The ID of the specific image file. */\n  file_id: string;\n}\n\n/** Information about a file attached to an assistant thread message. */\nexport interface MessageFileOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  created_at: number;\n  /** The ID of the message that this file is attached to. */\n  message_id: string;\n}\n\n/** Data representing a single evaluation run of an assistant thread. */\nexport interface ThreadRunOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The ID of the thread associated with this run. */\n  thread_id: string;\n  /** The ID of the assistant associated with the thread this run was performed against. */\n  assistant_id: string;\n  /**\n   * The status of the assistant thread run.\n   *\n   * Possible values: \"queued\", \"in_progress\", \"requires_action\", \"cancelling\", \"cancelled\", \"failed\", \"completed\", \"expired\"\n   */\n  status: string;\n  /** The details of the action required for the assistant thread run to continue. */\n  required_action?: RequiredActionOutput | null;\n  /** The last error, if any, encountered by this assistant thread run. */\n  last_error: RunErrorOutput | null;\n  /** The ID of the model to use. */\n  model: string;\n  /** The overridden system instructions used for this assistant thread run. */\n  instructions: string;\n  /** The overridden enabled tools used for this assistant thread run. */\n  tools: Array<ToolDefinitionOutput>;\n  /** A list of attached file IDs, ordered by creation date in ascending order. */\n  file_ids: string[];\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  created_at: number;\n  /** The Unix timestamp, in seconds, representing when this item expires. */\n  expires_at: string | null;\n  /** The Unix timestamp, in seconds, representing when this item was started. */\n  started_at: string | null;\n  /** The Unix timestamp, in seconds, representing when this completed. */\n  completed_at: string | null;\n  /** The Unix timestamp, in seconds, representing when this was cancelled. */\n  cancelled_at: string | null;\n  /** The Unix timestamp, in seconds, representing when this failed. */\n  failed_at: string | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: TypeSpecRecordOutput | null;\n}\n\n/** The details for required tool calls that must be submitted for an assistant thread run to continue. */\nexport interface SubmitToolOutputsActionOutput {\n  /** The ID of the tool call. This ID must be referenced when submitting tool outputs. */\n  id: string;\n  /** The object type, which is always 'submit_tool_outputs'. */\n  type: \"submit_tool_outputs\";\n  /** The details describing tools that should be called to submit tool outputs. */\n  submit_tool_outputs: SubmitToolOutputsDetailsOutput;\n}\n\n/** The details describing tools that should be called to submit tool outputs. */\nexport interface SubmitToolOutputsDetailsOutput {\n  /** The list of tool calls that must be resolved for the assistant thread run to continue. */\n  tool_calls: Array<RequiredToolCallOutput>;\n}\n\n/** A representation of a requested call to a function tool, needed by the model to continue evaluation of a run. */\nexport interface RequiredFunctionToolCallOutput {\n  /** The ID of the tool call. This ID must be referenced when submitting tool outputs. */\n  id: string;\n  /** The object type of the required tool call. Always 'function' for function tools. */\n  type: \"function\";\n  /** Detailed information about the function to be executed by the tool that includes name and arguments. */\n  function: FunctionToolCallDetailsOutput;\n}\n\n/** The details of an error as encountered by an assistant thread run. */\nexport interface RunErrorOutput {\n  /** The status for the error. */\n  code: string;\n  /** The human-readable text associated with the error. */\n  message: string;\n}\n\n/** Detailed information about a single step of an assistant thread run. */\nexport interface RunStepOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /**\n   * The type of run step, which can be either message_creation or tool_calls.\n   *\n   * Possible values: \"message_creation\", \"tool_calls\"\n   */\n  type: string;\n  /** The ID of the assistant associated with the run step. */\n  assistant_id: string;\n  /** The ID of the thread that was run. */\n  thread_id: string;\n  /** The ID of the run that this run step is a part of. */\n  run_id: string;\n  /**\n   * The status of this run step.\n   *\n   * Possible values: \"in_progress\", \"cancelled\", \"failed\", \"completed\", \"expired\"\n   */\n  status: string;\n  /** The details for this run step. */\n  step_details: RunStepDetailsOutput;\n  /** If applicable, information about the last error encountered by this run step. */\n  last_error: RunStepErrorOutput | null;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  created_at: number;\n  /** The Unix timestamp, in seconds, representing when this item expired. */\n  expired_at: string | null;\n  /** The Unix timestamp, in seconds, representing when this completed. */\n  completed_at: string | null;\n  /** The Unix timestamp, in seconds, representing when this was cancelled. */\n  cancelled_at: string | null;\n  /** The Unix timestamp, in seconds, representing when this failed. */\n  failed_at: string | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: TypeSpecRecordOutput | null;\n}\n\n/** The detailed information associated with a message creation run step. */\nexport interface RunStepMessageCreationDetailsOutput {\n  /** The object type, which is always 'message_creation'. */\n  type: \"message_creation\";\n  /** Information about the message creation associated with this run step. */\n  message_creation: RunStepMessageCreationReferenceOutput;\n}\n\n/** The details of a message created as a part of a run step. */\nexport interface RunStepMessageCreationReferenceOutput {\n  /** The ID of the message created by this run step. */\n  message_id: string;\n}\n\n/** The detailed information associated with a run step calling tools. */\nexport interface RunStepToolCallDetailsOutput {\n  /** The object type, which is always 'tool_calls'. */\n  type: \"tool_calls\";\n  /** A list of tool call details for this run step. */\n  tool_calls: Array<ToolCallOutput>;\n}\n\n/**\n * A record of a call to a code interpreter tool, issued by the model in evaluation of a defined tool, that\n * represents inputs and outputs consumed and emitted by the code interpreter.\n */\nexport interface CodeInterpreterToolCallOutput {\n  /** The ID of the tool call. This ID must be referenced when you submit tool outputs. */\n  id: string;\n  /** The object type, which is always 'code_interpreter'. */\n  type: \"code_interpreter\";\n  /** The details of the tool call to the code interpreter tool. */\n  code_interpreter: CodeInterpreterToolCallDetailsOutput;\n}\n\n/** The detailed information about a code interpreter invocation by the model. */\nexport interface CodeInterpreterToolCallDetailsOutput {\n  /** The input provided by the model to the code interpreter tool. */\n  input: string;\n  /** The outputs produced by the code interpreter tool back to the model in response to the tool call. */\n  outputs: Array<CodeInterpreterToolCallOutputOutput>;\n}\n\n/** A representation of a log output emitted by a code interpreter tool in response to a tool call by the model. */\nexport interface CodeInterpreterLogOutputOutput {\n  /** The object type, which is always 'logs'. */\n  type: \"logs\";\n  /** The serialized log output emitted by the code interpreter. */\n  logs: string;\n}\n\n/** A representation of an image output emitted by a code interpreter tool in response to a tool call by the model. */\nexport interface CodeInterpreterImageOutputOutput {\n  /** The object type, which is always 'image'. */\n  type: \"image\";\n  /** Referential information for the image associated with this output. */\n  image: CodeInterpreterImageReferenceOutput;\n}\n\n/** An image reference emitted by a code interpreter tool in response to a tool call by the model. */\nexport interface CodeInterpreterImageReferenceOutput {\n  /** The ID of the file associated with this image. */\n  file_id: string;\n}\n\n/**\n * A record of a call to a retrieval tool, issued by the model in evaluation of a defined tool, that represents\n * executed retrieval actions.\n */\nexport interface RetrievalToolCallOutput {\n  /** The ID of the tool call. This ID must be referenced when you submit tool outputs. */\n  id: string;\n  /** The object type, which is always 'retrieval'. */\n  type: \"retrieval\";\n  /** The key/value pairs produced by the retrieval tool. */\n  retrieval: TypeSpecRecordOutput;\n}\n\n/**\n * A record of a call to a function tool, issued by the model in evaluation of a defined tool, that represents the inputs\n * and output consumed and emitted by the specified function.\n */\nexport interface FunctionToolCallOutput {\n  /** The ID of the tool call. This ID must be referenced when you submit tool outputs. */\n  id: string;\n  /** The object type, which is always 'function'. */\n  type: \"function\";\n  /** The detailed information about the function called by the model. */\n  function: FunctionToolCallDetailsOutput;\n}\n\n/** The detailed information about the function called by the model. */\nexport interface FunctionToolCallDetailsOutput {\n  /** The name of the function. */\n  name: string;\n  /** The arguments that the model requires are provided to the named function. */\n  arguments: string;\n  /** The output of the function, only populated for function calls that have already have had their outputs submitted. */\n  output: string | null;\n}\n\n/** The error information associated with a failed run step. */\nexport interface RunStepErrorOutput {\n  /**\n   * The error code for this error.\n   *\n   * Possible values: \"server_error\", \"rate_limit_exceeded\"\n   */\n  code: string;\n  /** The human-readable text associated with this error. */\n  message: string;\n}\n\n/** The response data from a file list operation. */\nexport interface FileListResponseOutput {\n  /** The files returned for the request. */\n  data: Array<OpenAIFileOutput>;\n}\n\n/** Represents an assistant that can call the model and use tools. */\nexport interface OpenAIFileOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The size of the file, in bytes. */\n  bytes: number;\n  /** The name of the file. */\n  filename: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  created_at: number;\n  /**\n   * The intended purpose of a file.\n   *\n   * Possible values: \"fine-tune\", \"fine-tune-results\", \"assistants\", \"assistants_output\"\n   */\n  purpose: string;\n}\n\n/** The response data for a requested list of items. */\nexport interface ListResponseOfOutput<T> {\n  /** The requested list of items. */\n  data: T[];\n  /** The first ID represented in this list. */\n  first_id: string;\n  /** The last ID represented in this list. */\n  last_id: string;\n  /** A value indicating whether there are additional values available not captured in this list. */\n  has_more: boolean;\n}\n\n/** An abstract representation of an annotation to text thread message content. */\nexport type MessageTextAnnotationOutput =\n  | MessageTextFileCitationAnnotationOutput\n  | MessageTextFilePathAnnotationOutput;\n/** An abstract representation of a required action for an assistant thread run to continue. */\nexport type RequiredActionOutput = SubmitToolOutputsActionOutput;\n/** An abstract representation a a tool invocation needed by the model to continue a run. */\nexport type RequiredToolCallOutput = RequiredFunctionToolCallOutput;\n/** An abstract representation of the details for a run step. */\nexport type RunStepDetailsOutput =\n  | RunStepMessageCreationDetailsOutput\n  | RunStepToolCallDetailsOutput;\n/** An abstract representation of an emitted output from a code interpreter tool. */\nexport type CodeInterpreterToolCallOutputOutput =\n  | CodeInterpreterLogOutputOutput\n  | CodeInterpreterImageOutputOutput;\n/** An abstract representation of an input tool definition that an assistant can use. */\nexport type ToolDefinitionOutput =\n  | CodeInterpreterToolDefinitionOutput\n  | RetrievalToolDefinitionOutput\n  | FunctionToolDefinitionOutput;\n/** An abstract representation of a single item of thread message content. */\nexport type MessageContentOutput = MessageTextContentOutput | MessageImageFileContentOutput;\n/**\n * An abstract representation a tool call, issued by the model in evaluation of a configured tool definition, that must\n * be fulfilled and have its outputs submitted before the model can continue.\n */\nexport type ToolCallOutput =\n  | FunctionToolCallOutput\n  | CodeInterpreterToolCallOutput\n  | RetrievalToolCallOutput;\n"]}