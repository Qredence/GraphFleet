{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../src/rest/models.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/** The request details to use when creating a new assistant. */\nexport interface AssistantCreationOptions {\n  /** The ID of the model to use. */\n  model: string;\n  /** The name of the new assistant. */\n  name?: string | null;\n  /** The description of the new assistant. */\n  description?: string | null;\n  /** The system instructions for the new assistant to use. */\n  instructions?: string | null;\n  /** The collection of tools to enable for the new assistant. */\n  tools?: Array<ToolDefinition>;\n  /** A list of previously uploaded file IDs to attach to the assistant. */\n  file_ids?: string[];\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: TypeSpecRecord | null;\n}\n\n/** The input definition information for a code interpreter tool as used to configure an assistant. */\nexport interface CodeInterpreterToolDefinition {\n  /** The object type, which is always 'code_interpreter'. */\n  type: \"code_interpreter\";\n}\n\n/** The input definition information for a retrieval tool as used to configure an assistant. */\nexport interface RetrievalToolDefinition {\n  /** The object type, which is always 'retrieval'. */\n  type: \"retrieval\";\n}\n\n/** The input definition information for a function tool as used to configure an assistant. */\nexport interface FunctionToolDefinition {\n  /** The object type, which is always 'function'. */\n  type: \"function\";\n  /** The definition of the concrete function that the function tool should call. */\n  function: FunctionDefinition;\n}\n\n/** The input definition information for a function. */\nexport interface FunctionDefinition {\n  /** The name of the function to be called. */\n  name: string;\n  /** A description of what the function does, used by the model to choose when and how to call the function. */\n  description?: string;\n  /** The parameters the functions accepts, described as a JSON Schema object. */\n  parameters: unknown;\n}\n\nexport interface TypeSpecRecord extends Record<string, string> {}\n\n/** The request details to use when modifying an existing assistant. */\nexport interface UpdateAssistantOptions {\n  /** The ID of the model to use. */\n  model?: string;\n  /** The modified name for the assistant to use. */\n  name?: string | null;\n  /** The modified description for the assistant to use. */\n  description?: string | null;\n  /** The modified system instructions for the new assistant to use. */\n  instructions?: string | null;\n  /** The modified collection of tools to enable for the assistant. */\n  tools?: Array<ToolDefinition>;\n  /** The modified list of previously uploaded fileIDs to attach to the assistant. */\n  file_ids?: string[];\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: TypeSpecRecord | null;\n}\n\n/** The details used to create a new assistant thread. */\nexport interface AssistantThreadCreationOptions {\n  /** The messages to associate with the new thread. */\n  messages?: Array<{\n    /**\n     * The role associated with the assistant thread message.\n     *\n     * Possible values: user, assistant\n     */\n    role: string;\n    /** The list of content items associated with the assistant thread message. */\n    content: string;\n  }>;\n  /** A set of key/value pairs used to store additional information about the object. */\n  metadata?: Record<string, string>;\n}\n\n/** A single message within an assistant thread, as provided during that thread's creation for its initial state. */\nexport interface ThreadInitializationMessage {\n  /**\n   * The role associated with the assistant thread message. Currently, only 'user' is supported when providing initial messages to a new thread.\n   *\n   * Possible values: \"user\", \"assistant\"\n   */\n  role: string;\n  /** The textual content of the initial message. Currently, robust input including images and annotated text may only be provided via a separate call to the create message API. */\n  content: string;\n  /**\n   * A list of file IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can\n   * access files.\n   */\n  file_ids?: string[];\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: TypeSpecRecord | null;\n}\n\n/** The details used when creating a new run of an assistant thread. */\nexport interface CreateRunOptions {\n  /** The ID of the assistant that should run the thread. */\n  assistant_id: string;\n  /** The overridden model name that the assistant should use to run the thread. */\n  model?: string | null;\n  /** The overridden system instructions that the assistant should use to run the thread. */\n  instructions?: string | null;\n  /**\n   * Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior\n   * on a per-run basis without overriding other instructions.\n   */\n  additional_instructions?: string | null;\n  /** The overridden list of enabled tools that the assistant should use to run the thread. */\n  tools?: Array<ToolDefinition> | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: TypeSpecRecord | null;\n}\n\n/** The data provided during a tool outputs submission to resolve pending tool calls and allow the model to continue. */\nexport interface ToolOutput {\n  /** The ID of the tool call being resolved, as provided in the tool calls of a required action from a run. */\n  tool_call_id?: string;\n  /** The output from the tool to be submitted. */\n  output?: string;\n}\n\n/** The details used when creating and immediately running a new assistant thread. */\nexport interface CreateAndRunThreadOptions {\n  /** The ID of the assistant for which the thread should be created. */\n  assistant_id: string;\n  /** The details used to create the new thread. */\n  thread?: AssistantThreadCreationOptions;\n  /** The overridden model that the assistant should use to run the thread. */\n  model?: string;\n  /** The overridden system instructions the assistant should use to run the thread. */\n  instructions?: string;\n  /** The overridden list of enabled tools the assistant should use to run the thread. */\n  tools?: Array<ToolDefinition>;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: TypeSpecRecord | null;\n}\n\n/** An abstract representation of an input tool definition that an assistant can use. */\nexport type ToolDefinition =\n  | CodeInterpreterToolDefinition\n  | RetrievalToolDefinition\n  | FunctionToolDefinition;\n"]}