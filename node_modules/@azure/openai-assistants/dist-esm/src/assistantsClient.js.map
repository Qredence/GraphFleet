{"version":3,"file":"assistantsClient.js","sourceRoot":"","sources":["../../src/assistantsClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { Pipeline } from \"@azure/core-rest-pipeline\";\nimport { createAssistants } from \"./api/AssistantsContext.js\";\nimport {\n  cancelRun,\n  createAssistant,\n  createAssistantFile,\n  createMessage,\n  createRun,\n  createThread,\n  createThreadAndRun,\n  deleteAssistant,\n  deleteAssistantFile,\n  deleteFile,\n  deleteThread,\n  getAssistant,\n  getAssistantFile,\n  getFile,\n  getMessage,\n  getMessageFile,\n  getRun,\n  getRunStep,\n  getThread,\n  listAssistantFiles,\n  listAssistants,\n  listFiles,\n  listMessageFiles,\n  listMessages,\n  listRunSteps,\n  listRuns,\n  submitToolOutputsToRun,\n  updateAssistant,\n  updateMessage,\n  updateRun,\n  updateThread,\n  uploadFile,\n} from \"./api/index.js\";\nimport { nonAzurePolicy } from \"./api/policies/nonAzure.js\";\nimport { AssistantsClientOptions } from \"./index.js\";\nimport {\n  Assistant,\n  AssistantCreationOptions,\n  AssistantDeletionStatus,\n  AssistantFile,\n  AssistantFileDeletionStatus,\n  AssistantThread,\n  AssistantThreadCreationOptions,\n  CreateAndRunThreadOptions,\n  CreateRunOptions,\n  FileDeletionStatus,\n  FileListResponse,\n  FilePurpose,\n  InputFile,\n  MessageFile,\n  MessageRole,\n  ListResponseOf,\n  RunStep,\n  ThreadDeletionStatus,\n  ThreadMessage,\n  ThreadRun,\n  ToolOutput,\n  UpdateAssistantOptions,\n} from \"./models/models.js\";\nimport {\n  CancelRunOptions,\n  CreateAssistantFileOptions,\n  CreateAssistantOptions,\n  CreateMessageOptions,\n  CreateRunRequestOptions,\n  CreateThreadAndRunOptions,\n  CreateThreadOptions,\n  DeleteAssistantFileOptions,\n  DeleteAssistantOptions,\n  DeleteFileOptions,\n  DeleteThreadOptions,\n  GetAssistantFileOptions,\n  GetAssistantOptions,\n  GetFileOptions,\n  GetMessageFileOptions,\n  GetMessageOptions,\n  GetRunOptions,\n  GetRunStepOptions,\n  GetThreadOptions,\n  ListAssistantFilesOptions,\n  ListAssistantsOptions,\n  ListFilesOptions,\n  ListMessageFilesOptions,\n  ListMessagesOptions,\n  ListRunStepsOptions,\n  ListRunsOptions,\n  SubmitToolOutputsToRunOptions,\n  UpdateAssistantRequestOptions,\n  UpdateMessageOptions,\n  UpdateRunOptions,\n  UpdateThreadOptions,\n  UploadFileOptions,\n} from \"./models/options.js\";\nimport { AssistantsContext } from \"./rest/index.js\";\n\nexport { AssistantsClientOptions } from \"./api/AssistantsContext.js\";\n\n/** Client handling assistant-related operations. */\nexport class AssistantsClient {\n  /** The pipeline used by this client to make requests */\n  public readonly pipeline: Pipeline;\n  private _client: AssistantsContext;\n  private _isAzure = false;\n\n  /**\n   * Initializes an instance of AssistantsClient for use with an OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A key credential used to authenticate to an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   This constructor initializes an AssistantsClient object that can only be used with Azure OpenAI resources.\n   *   To use AssistantsClient with a non-Azure OpenAI inference endpoint, use a constructor that accepts a non-Azure OpenAI API key instead.\n   */\n  constructor(endpoint: string, credential: KeyCredential, options?: AssistantsClientOptions);\n  /**\n   * Initializes an instance of AssistantsClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A token credential used to authenticate with an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   */\n  constructor(endpoint: string, credential: TokenCredential, options?: AssistantsClientOptions);\n  /**\n   * Initializes an instance of AssistantsClient for use with the non-Azure OpenAI endpoint.\n   * @param openAiApiKey - The API key to use when connecting to the non-Azure OpenAI endpoint.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   AssistantsClient objects initialized with this constructor can only be used with the non-Azure OpenAI inference endpoint.\n   *   To use AssistantsClient with an Azure OpenAI resource, use a constructor that accepts a resource URI and Azure authentication credential instead.\n   */\n  constructor(openAiApiKey: KeyCredential, options?: AssistantsClientOptions);\n  constructor(\n    endpointOrOpenAiKey: string | KeyCredential,\n    credOrOptions: KeyCredential | TokenCredential | AssistantsClientOptions = {},\n    options: AssistantsClientOptions = {}\n  ) {\n    let opts: AssistantsClientOptions;\n    let endpoint: string;\n    let cred: KeyCredential | TokenCredential;\n    if (isCred(credOrOptions)) {\n      endpoint = endpointOrOpenAiKey as string;\n      cred = credOrOptions;\n      opts = options;\n      this._isAzure = true;\n    } else {\n      endpoint = createOpenAIEndpoint(1);\n      cred = endpointOrOpenAiKey as KeyCredential;\n      const { credentials, ...restOpts } = credOrOptions;\n      opts = {\n        baseUrl: endpoint,\n        credentials: {\n          apiKeyHeaderName: credentials?.apiKeyHeaderName ?? \"Authorization\",\n          scopes: credentials?.scopes,\n        },\n        ...restOpts,\n      };\n    }\n\n    this._client = createAssistants(endpoint, cred, {\n      ...opts,\n      ...(this._isAzure\n        ? {}\n        : {\n            additionalPolicies: [\n              ...(opts.additionalPolicies ?? []),\n              {\n                position: \"perCall\",\n                policy: nonAzurePolicy(),\n              },\n            ],\n          }),\n    });\n    this.pipeline = this._client.pipeline;\n  }\n\n  /** Creates a new assistant. */\n  createAssistant(\n    body: AssistantCreationOptions,\n    options: CreateAssistantOptions = { requestOptions: {} }\n  ): Promise<Assistant> {\n    return createAssistant(this._client, body, options);\n  }\n\n  /** Gets a list of assistants that were previously created. */\n  listAssistants(\n    options: ListAssistantsOptions = { requestOptions: {} }\n  ): Promise<ListResponseOf<Assistant>> {\n    return listAssistants(this._client, options);\n  }\n\n  /** Retrieves an existing assistant. */\n  getAssistant(\n    assistantId: string,\n    options: GetAssistantOptions = { requestOptions: {} }\n  ): Promise<Assistant> {\n    return getAssistant(this._client, assistantId, options);\n  }\n\n  /** Modifies an existing assistant. */\n  updateAssistant(\n    assistantId: string,\n    body: UpdateAssistantOptions,\n    options: UpdateAssistantRequestOptions = { requestOptions: {} }\n  ): Promise<Assistant> {\n    return updateAssistant(this._client, assistantId, body, options);\n  }\n\n  /** Deletes an assistant. */\n  deleteAssistant(\n    assistantId: string,\n    options: DeleteAssistantOptions = { requestOptions: {} }\n  ): Promise<AssistantDeletionStatus> {\n    return deleteAssistant(this._client, assistantId, options);\n  }\n\n  /** Attaches a previously uploaded file to an assistant for use by tools that can read files. */\n  createAssistantFile(\n    assistantId: string,\n    fileId: string,\n    options: CreateAssistantFileOptions = { requestOptions: {} }\n  ): Promise<AssistantFile> {\n    return createAssistantFile(this._client, assistantId, fileId, options);\n  }\n\n  /** Gets a list of files attached to a specific assistant, as used by tools that can read files. */\n  listAssistantFiles(\n    assistantId: string,\n    options: ListAssistantFilesOptions = { requestOptions: {} }\n  ): Promise<ListResponseOf<AssistantFile>> {\n    return listAssistantFiles(this._client, assistantId, options);\n  }\n\n  /** Retrieves a file attached to an assistant. */\n  getAssistantFile(\n    assistantId: string,\n    fileId: string,\n    options: GetAssistantFileOptions = { requestOptions: {} }\n  ): Promise<AssistantFile> {\n    return getAssistantFile(this._client, assistantId, fileId, options);\n  }\n\n  /**\n   * Unlinks a previously attached file from an assistant, rendering it unavailable for use by tools that can read\n   * files.\n   */\n  deleteAssistantFile(\n    assistantId: string,\n    fileId: string,\n    options: DeleteAssistantFileOptions = { requestOptions: {} }\n  ): Promise<AssistantFileDeletionStatus> {\n    return deleteAssistantFile(this._client, assistantId, fileId, options);\n  }\n\n  /** Creates a new thread. Threads contain messages and can be run by assistants. */\n  createThread(\n    body: AssistantThreadCreationOptions = {},\n    options: CreateThreadOptions = { requestOptions: {} }\n  ): Promise<AssistantThread> {\n    return createThread(this._client, body, options);\n  }\n\n  /** Gets information about an existing thread. */\n  getThread(\n    threadId: string,\n    options: GetThreadOptions = { requestOptions: {} }\n  ): Promise<AssistantThread> {\n    return getThread(this._client, threadId, options);\n  }\n\n  /** Modifies an existing thread. */\n  updateThread(\n    threadId: string,\n    options: UpdateThreadOptions = { requestOptions: {} }\n  ): Promise<AssistantThread> {\n    return updateThread(this._client, threadId, options);\n  }\n\n  /** Deletes an existing thread. */\n  deleteThread(\n    threadId: string,\n    options: DeleteThreadOptions = { requestOptions: {} }\n  ): Promise<ThreadDeletionStatus> {\n    return deleteThread(this._client, threadId, options);\n  }\n\n  /** Creates a new message on a specified thread. */\n  createMessage(\n    threadId: string,\n    role: MessageRole,\n    content: string,\n    options: CreateMessageOptions = { requestOptions: {} }\n  ): Promise<ThreadMessage> {\n    return createMessage(this._client, threadId, role, content, options);\n  }\n\n  /** Gets a list of messages that exist on a thread. */\n  listMessages(\n    threadId: string,\n    options: ListMessagesOptions = { requestOptions: {} }\n  ): Promise<ListResponseOf<ThreadMessage>> {\n    return listMessages(this._client, threadId, options);\n  }\n\n  /** Gets an existing message from an existing thread. */\n  getMessage(\n    threadId: string,\n    messageId: string,\n    options: GetMessageOptions = { requestOptions: {} }\n  ): Promise<ThreadMessage> {\n    return getMessage(this._client, threadId, messageId, options);\n  }\n\n  /** Modifies an existing message on an existing thread. */\n  updateMessage(\n    threadId: string,\n    messageId: string,\n    options: UpdateMessageOptions = { requestOptions: {} }\n  ): Promise<ThreadMessage> {\n    return updateMessage(this._client, threadId, messageId, options);\n  }\n\n  /** Gets a list of previously uploaded files associated with a message from a thread. */\n  listMessageFiles(\n    threadId: string,\n    messageId: string,\n    options: ListMessageFilesOptions = { requestOptions: {} }\n  ): Promise<ListResponseOf<MessageFile>> {\n    return listMessageFiles(this._client, threadId, messageId, options);\n  }\n\n  /** Gets information about a file attachment to a message within a thread. */\n  getMessageFile(\n    threadId: string,\n    messageId: string,\n    fileId: string,\n    options: GetMessageFileOptions = { requestOptions: {} }\n  ): Promise<MessageFile> {\n    return getMessageFile(this._client, threadId, messageId, fileId, options);\n  }\n\n  /** Creates a new run for an assistant thread. */\n  createRun(\n    threadId: string,\n    createRunOptions: CreateRunOptions,\n    options: CreateRunRequestOptions = { requestOptions: {} }\n  ): Promise<ThreadRun> {\n    return createRun(this._client, threadId, createRunOptions, options);\n  }\n\n  /** Gets a list of runs for a specified thread. */\n  listRuns(\n    threadId: string,\n    options: ListRunsOptions = { requestOptions: {} }\n  ): Promise<ListResponseOf<ThreadRun>> {\n    return listRuns(this._client, threadId, options);\n  }\n\n  /** Gets an existing run from an existing thread. */\n  getRun(\n    threadId: string,\n    runId: string,\n    options: GetRunOptions = { requestOptions: {} }\n  ): Promise<ThreadRun> {\n    return getRun(this._client, threadId, runId, options);\n  }\n\n  /** Modifies an existing thread run. */\n  updateRun(\n    threadId: string,\n    runId: string,\n    options: UpdateRunOptions = { requestOptions: {} }\n  ): Promise<ThreadRun> {\n    return updateRun(this._client, threadId, runId, options);\n  }\n\n  /** Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires_action' with a required_action.type of 'submit_tool_outputs'. */\n  submitToolOutputsToRun(\n    threadId: string,\n    runId: string,\n    toolOutputs: ToolOutput[],\n    options: SubmitToolOutputsToRunOptions = { requestOptions: {} }\n  ): Promise<ThreadRun> {\n    return submitToolOutputsToRun(this._client, threadId, runId, toolOutputs, options);\n  }\n\n  /** Cancels a run of an in progress thread. */\n  cancelRun(\n    threadId: string,\n    runId: string,\n    options: CancelRunOptions = { requestOptions: {} }\n  ): Promise<ThreadRun> {\n    return cancelRun(this._client, threadId, runId, options);\n  }\n\n  /** Creates a new assistant thread and immediately starts a run using that new thread. */\n  createThreadAndRun(\n    body: CreateAndRunThreadOptions,\n    options: CreateThreadAndRunOptions = { requestOptions: {} }\n  ): Promise<ThreadRun> {\n    return createThreadAndRun(this._client, body, options);\n  }\n\n  /** Gets a single run step from a thread run. */\n  getRunStep(\n    threadId: string,\n    runId: string,\n    stepId: string,\n    options: GetRunStepOptions = { requestOptions: {} }\n  ): Promise<RunStep> {\n    return getRunStep(this._client, threadId, runId, stepId, options);\n  }\n\n  /** Gets a list of run steps from a thread run. */\n  listRunSteps(\n    threadId: string,\n    runId: string,\n    options: ListRunStepsOptions = { requestOptions: {} }\n  ): Promise<ListResponseOf<RunStep>> {\n    return listRunSteps(this._client, threadId, runId, options);\n  }\n\n  /** Gets a list of previously uploaded files. */\n  listFiles(options: ListFilesOptions = { requestOptions: {} }): Promise<FileListResponse> {\n    return listFiles(this._client, options);\n  }\n\n  /** Uploads a file for use by other operations. */\n  uploadFile(\n    file: Uint8Array,\n    purpose: FilePurpose,\n    options: UploadFileOptions = { requestOptions: {} }\n  ): Promise<InputFile> {\n    return uploadFile(this._client, file, purpose, options);\n  }\n\n  /** Delete a previously uploaded file. */\n  deleteFile(\n    fileId: string,\n    options: DeleteFileOptions = { requestOptions: {} }\n  ): Promise<FileDeletionStatus> {\n    return deleteFile(this._client, fileId, options);\n  }\n\n  /** Returns information about a specific file. Does not retrieve file content. */\n  getFile(fileId: string, options: GetFileOptions = { requestOptions: {} }): Promise<InputFile> {\n    return getFile(this._client, fileId, options);\n  }\n}\n\nfunction createOpenAIEndpoint(version: number): string {\n  return `https://api.openai.com/v${version}`;\n}\n\nfunction isCred(cred: Record<string, any>): cred is TokenCredential | KeyCredential {\n  return isTokenCredential(cred) || cred.key !== undefined;\n}\n"]}